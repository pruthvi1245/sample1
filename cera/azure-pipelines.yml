# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- Dev/v1

pool:
  vmImage: ubuntu-latest

variables:


  # Web app name
  webAppName: 'Cera-web-128'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'Cera-application'



stages:
- stage: Build
  displayName: Build stage
 
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: 'CeraWebApplication/CeraWebApplication.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'CeraWebApplication/CeraWebApplication.csproj'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Cera-web'
        publishLocation: 'FilePath'
        TargetPath: '$(Build.ArtifactStagingDirectory)'

   
    
- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Pay-As-You-Go(b6700194-6522-4789-b5a1-c222828c1fba)'
              appType: 'webApp'
              appName: 'Cera-128-web'
              package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
              deploymentMethod: 'auto'
           

